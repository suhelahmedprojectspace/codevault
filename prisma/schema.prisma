generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation("userSessions", fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                        String             @id @default(cuid())
  username                  String             @unique
  email                     String?            @unique
  emailVerified             DateTime?
  image                     String?
  password                  String?
  role                      Role               @default(USER)
  codeBuddyId               String?
  matchingPreferences       Json?
  createdAt                 DateTime           @default(now())
  portfolioId               String?
  accounts                  Account[]
  blog                      Blog[]
  sendBlogRequest           BlogRequest[]      @relation("UserBlogRequests")
  receivedCodeBuddyRequests CodeBuddyRequest[] @relation("UserReceiver")
  codeBuddyRequests         CodeBuddyRequest[] @relation("UserRequests")
  comments                  Comment[]
  likes                     Like[]
  receivedMessages          Message[]          @relation("ReceivedMessages")
  sentMessages              Message[]          @relation("SentMessages")
  receivedNotifcations      Notification[]     @relation("Receiver")
  sentNotification          Notification[]     @relation("Sender")
  portfolio                 Portfolio?
  sessions                  Session[]          @relation("userSessions")
  snippetCollection         Snippet[]
  sendRequests              SnippetRequest[]   @relation("UserSnippetRequests")
  codeBuddy                 User?              @relation("CodeBuddies", fields: [codeBuddyId], references: [id])
  buddyOf                   User[]             @relation("CodeBuddies")
  allowedBlog               Blog[]             @relation("BlogAllowedUsers")
  allowedSnippets           Snippet[]          @relation("SnippetAllowedUsers")
}

model CodeBuddyRequest {
  id           String         @id @default(cuid())
  requesterId  String
  receiverId   String
  status       RequestStatus  @default(PENDING)
  createdAt    DateTime       @default(now())
  expiresAt    DateTime       @default(now())
  reciever     User           @relation("UserReceiver", fields: [receiverId], references: [id])
  requester    User           @relation("UserRequests", fields: [requesterId], references: [id])
  notification Notification[]

  @@unique([requesterId, receiverId])
  @@index([status])
}

model techStack {
  category String?
  name     String?
  id       Int     @id @default(autoincrement())
  logo     String?
}

model Portfolio {
  id               String       @id @default(cuid())
  title            String
  summary          String       @db.VarChar(1000)
  profile          String?
  projects         Json?
  name             String
  stackid          String?
  userid           String       @unique
  achievements     String?
  interests        String?
  availability     String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  isPublished      Boolean      @default(false)
  experiences      Json?
  education        String?
  location         String?
  passionate       String?
  yearofexperience String?
  certifications   Json?
  techstack        Json?
  user             User         @relation(fields: [userid], references: [id])
  links            SocialLink[]
}

model SocialLink {
  id          String    @id @default(cuid())
  platform    String
  url         String
  portfolioId String
  logo        String?
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model BlogRequest {
  id          String        @id @default(cuid())
  blogId      String
  requesterId String
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  blog        Blog          @relation(fields: [blogId], references: [id])
  requester   User          @relation("UserBlogRequests", fields: [requesterId], references: [id])
}

model SnippetRequest {
  id          String        @id @default(cuid())
  snippetId   String
  requesterId String
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  requester   User          @relation("UserSnippetRequests", fields: [requesterId], references: [id])
  snippet     Snippet       @relation(fields: [snippetId], references: [id])
}

model Snippet {
  id              String           @id @default(cuid())
  authorid        String
  title           String
  description     String
  content         String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  visibility      Visibility       @default(private)
  framework       String?
  notifications   Notification[]
  author          User             @relation(fields: [authorid], references: [id])
  snippetRequests SnippetRequest[]
  allowedUsers    User[]           @relation("SnippetAllowedUsers")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  blogId    String
  createdAt DateTime @default(now())
  blog      Blog     @relation(fields: [blogId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, blogId])
}

model Blog {
  id            String         @id @default(cuid())
  authorId      String
  content       String
  title         String
  thumbnail     String?
  createdAt     DateTime       @default(now())
  updateAt      DateTime       @updatedAt
  visibilty     Visibility     @default(private)
  author        User           @relation(fields: [authorId], references: [id])
  blogRequests  BlogRequest[]
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
  allowedUsers  User[]         @relation("BlogAllowedUsers")
}

model Notification {
  id               String            @id @default(cuid())
  senderId         String
  receiverId       String
  snippetId        String?
  blogId           String?
  status           RequestStatus     @default(PENDING)
  createdAt        DateTime          @default(now())
  isRead           Boolean           @default(false)
  type             String?
  codebuddyId      String?
  blog             Blog?             @relation(fields: [blogId], references: [id])
  codeBuddyRequest CodeBuddyRequest? @relation(fields: [codebuddyId], references: [id])
  receiver         User              @relation("Receiver", fields: [receiverId], references: [id])
  sender           User              @relation("Sender", fields: [senderId], references: [id])
  snippet          Snippet?          @relation(fields: [snippetId], references: [id])
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  authorId  String
  blogId    String
  parentId  String?
  author    User      @relation(fields: [authorId], references: [id])
  blog      Blog      @relation(fields: [blogId], references: [id])
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")

  @@index([blogId])
  @@index([parentId])
}

model Message {
  id          String   @id @default(cuid())
  content     String
  senderId    String
  recipientId String
  timestamp   DateTime @default(now())
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Visibility {
  public
  private
}
